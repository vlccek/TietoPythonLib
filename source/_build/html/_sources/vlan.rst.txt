***********
Vlan module
***********

.. contents:: Table of Contents


Vlans
-----

-  everyting about vlans is in module :py:mod:`vlan`
-  for adding vlans to switch you can use class :py:class:`Vlans`.
-  you can create vlan in vlans by method :py:meth:`Vlans.add_by_params()` or
   :py:meth:`add_by_dict()`
-  Class :py:class:`Vlans` can be also displayed as table by simply printing it
-  You can also delete vlan from :py:class:`Vlans` class by method :py:meth:`delete()`
-  Methods :py:meth:`Vlans.delete()`, :py:meth:`Vlans.add_by_params()` and :py:meth:`Vlans.add_by_dict()` also
   sorts vlans in :py:class:`Vlans` object by their :py:attr:`id` after
   addition/deletion

.. testsetup::


   from vlan import Vlans

Adding vlans by :py:meth:`Vlans.add_by_params()`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. testcode::


   my_sweat_vlans = Vlans()
   my_sweat_vlans.add_by_params(id=10)
   my_sweat_vlans.add_by_params(20, type="public", auto_vxlan=False, description="test2", stats=True, active=True, untagged_ports=[243, 244, 245], active_ports=[666], ports=[243, 244, 245, 666])
   print(my_sweat_vlans)
   

Will produce this output
........................


.. testoutput::


      id  type     auto-vxlan    replicators    scope    description    active    stats    ports                 untagged_ports    active_ports    vxlan    vxlanmodu
    ----  -------  ------------  -------------  -------  -------------  --------  -------  --------------------  ----------------  --------------  -------  ---------
      10  private  False                        local                   False     False    []                    []                []
      20  public   False                        local    test2          True      True     [243, 244, 245, 666]  [243, 244, 245]   [666]





Adding vlans by :py:meth:`Vlans.add_by_dict()` method
~~~~~~~~~~~~~~~~~~~~~~

.. testcode::

   my_sweat_vlans = Vlans()
   vlan_template = {
            "id": 1,
            "type": "private",
            "auto-vxlan": False,
            "replicators": None,
            "scope": "local",
            "description": "", 
            "active": False, 
            "stats": False, 
            "ports": [], 
            "untagged_ports": [], 
            "active_ports": [], 
            "vxlan": None, 
            "vxlanmodule": "" 
        }
      my_sweat_vlans.add_by_dict(vlan_template)


.. testoutput::
   

     id  type     auto-vxlan    replicators    scope    description    active    stats    ports                 untagged_ports    active_ports    vxlan    vxlanmodu
   ----  -------  ------------  -------------  -------  -------------  --------  -------  --------------------  ----------------  --------------  -------  ---------
     1   private  False                        local                   False     False    []                    []                []



delete() method
~~~~~~~~~~~~~~~

.. code:: py

    example_vlans = Vlans()
    example_vlans.add_by_params(id=42)
    example_vlans.add_by_params(id=31)
    example_vlans.add_by_params(id=128)
    example_vlans.add_by_params(id=4)
    example_vlans.delete(id=42) # deletes vlan with id 42 and sorts the rest of them by id

    # before delete
    """
    print(example_vlans): produce table of used vlans
      id  type     auto-vxlan    replicators    scope    description    active    stats    ports                 untagged_ports    active_ports    vxlan    vxlanmodu
    ----  -------  ------------  -------------  -------  -------------  --------  -------  --------------------  ----------------  --------------  -------  ---------
      42  private  False                        local                   False     False    []                    []                []
      31  private  False                        local                   False     False    []                    []                []
      128 private  False                        local                   False     False    []                    []                []
      4   private  False                        local                   False     False    []                    []                []
    """

    # after delete
    """
    print(example_vlans): produce table of used vlans
      id  type     auto-vxlan    replicators    scope    description    active    stats    ports                 untagged_ports    active_ports    vxlan    vxlanmodu
    ----  -------  ------------  -------------  -------  -------------  --------  -------  --------------------  ----------------  --------------  -------  ---------
      4   private  False                        local                   False     False    []                    []                []
      31  private  False                        local                   False     False    []                    []                []
      128 private  False                        local                   False     False    []                    []                []
    """

    try:
        example_vlans.delete(id=67) # if vlan with such id doesn't exist, exception raises
    except:
        print("Vlan with such ID doesn't exist")




.. automodule:: vlan
   :members:
   :undoc-members:
   :show-inheritance:
   :private-members:
